import fs from "fs"
import path from "path"
import m from "../acorn/src/unicode-property-data.js"

const reScriptValuesAddedInES = m[13].nonBinary.Script
const scriptValues = new Set()
for await (const value of getLatestUnicodeScriptValues()) {
  scriptValues.add(value)
}
const scriptValuesAddedInUnicode = "export default " +
JSON.stringify(
  [...scriptValues]
    // The unicode script values now follow the Unicode spec as of ES2023,
    // but prior to ES2022 they were listed in the ES2022 spec.
    // The generated file lists all the unicode script values except those listed before ES2022.
    .filter(value => !reScriptValuesAddedInES.test(value))
    .sort()
    .join(" ")
)

writeGeneratedFile("scriptValuesAddedInUnicode", scriptValuesAddedInUnicode)

console.log("Done. The generated files must be committed.")

function writeGeneratedFile(filename, content) {
  const comment = "// This file was generated by \"bin/" + path.basename(import.meta.filename) + "\". Do not modify manually!"
  fs.writeFileSync(path.resolve("./acorn/src/generated", filename + ".js"), comment + "\n" + content + "\n", "utf8")
}

/**
 * Gets the all unicode script values from the latest PropertyValueAliases.
 */
async function * getLatestUnicodeScriptValues() {
  const response = await fetch("https://unicode.org/Public/UCD/latest/ucd/PropertyValueAliases.txt")
  const lines = (await response.text()).split("\n")
  for (const line of lines) {
    if (!line || line.startsWith("#")) {
      continue
    }
    const [propertyAlias, alias, canonical, ...remaining] = line
      .split("#")[0] // strip comments
      .split(";") // split by semicolon
      .map((x) => x.trim()) // trim

    if (propertyAlias !== "sc") {
      continue
    }

    yield canonical
    yield alias
    yield * remaining
  }
}
